services:
  auth_service:
    build:
      context: ./auth_service
    container_name: auth_service
    ports:
      - "8000:8000"
    networks:
      backend:
        ipv4_address: 192.168.1.10
    env_file:
      - ./auth_service/.env
    volumes:
      - ./auth_service:/app
    depends_on:
      - postgres_auth_service
      - kafka
      - redis

  video_service:
    build:
      context: ./video_service
    container_name: video_service
    ports:
      - "8001:8000"
    networks:
      backend:
        ipv4_address: 192.168.1.11
    env_file:
      - ./video_service/.env
    command: sh -c "python manage.py runserver 0.0.0.0:8000 & celery -A video_service worker --loglevel=info"
    depends_on:
      - postgres_video_service
      - kafka
      - redis
      - auth_service

  comment_service:
    build:
      context: ./comment_service
    container_name: comment_service
    ports:
      - "8002:8000"
    networks:
      backend:
        ipv4_address: 192.168.1.12
    env_file:
      - ./comment_service/.env
    depends_on:
      - postgres_comment_service
      - kafka
      - redis
      - auth_service
      - apm-server # Добавляем зависимость от сервиса APM

  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service
    ports:
      - "8003:8000"
    networks:
      backend:
        ipv4_address: 192.168.1.13
    env_file:
      - ./notification_service/.env
    environment:
      - DJANGO_SETTINGS_MODULE=notification_service.settings
    command: >
      sh -c " daphne -b 0.0.0.0 -p 8000 notification_service.asgi:application"
    depends_on:
      - postgres_notification_service
      - kafka
      - redis
      - auth_service

  kafka_consumer_service:
    build:
      context: ./notification_service
    container_name: kafka_consumer_service
    networks:
      backend:
        ipv4_address: 192.168.1.25
    env_file:
      - ./notification_service/.env
    command: >
      sh -c " python -m notification_app.kafka_consumer"
    depends_on:
      - kafka
      - redis

  recommendation_service:
    build:
      context: ./recommendation_service
    container_name: recommendation_service
    ports:
      - "8004:8000"
    networks:
      backend:
        ipv4_address: 192.168.1.14
    env_file:
      - ./recommendation_service/.env
    depends_on:
      - postgres_recommendation_service
      - kafka
      - auth_service

  postgres_auth_service:
    image: postgres:latest
    container_name: auth_service_db
    env_file:
      - ./auth_service/.env
    volumes:
      - auth_service_db_data:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: 192.168.1.15

  postgres_video_service:
    image: postgres:latest
    container_name: video_service_db
    env_file:
      - ./video_service/.env
    volumes:
      - video_service_db_data:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: 192.168.1.16

  postgres_comment_service:
    image: postgres:latest
    container_name: comment_service_db
    env_file:
      - ./comment_service/.env
    volumes:
      - comment_service_db_data:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: 192.168.1.17

  postgres_notification_service:
    image: postgres:latest
    container_name: notification_service_db
    env_file:
      - ./notification_service/.env
    volumes:
      - notification_service_db_data:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: 192.168.1.18

  postgres_recommendation_service:
    image: postgres:latest
    container_name: recommendation_service_db
    env_file:
      - ./recommendation_service/.env
    volumes:
      - recommendation_service_db_data:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: 192.168.1.19

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Порт на хосте
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092 # Внутренний порт для прослушивания
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 # Порт, который будет использоваться для внешних подключений
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9092 # Для координации
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 # Подключение к Zookeeper
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CREATE_TOPICS=auth-topic:1:1,video-topic:1:1,comment-topic:1:1,notification-topic:1:1,recommendation-topic:1:1
    depends_on:
      - zookeeper
    networks:
      backend:
        ipv4_address: 192.168.1.20

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181" # Порт для подключения
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      backend:
        ipv4_address: 192.168.1.21

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      backend:
        ipv4_address: 192.168.1.22

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:8080"
    networks:
      backend:
        ipv4_address: 192.168.1.23
    depends_on:
      - auth_service
      - video_service
      - comment_service
      - notification_service
      - recommendation_service

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.10.0
    container_name: apm-server
    environment:
      - output.elasticsearch.hosts=["elasticsearch:9200"] # Путь к Elasticsearch
    ports:
      - "8200:8200" # Порт для подключения к APM
    networks:
      backend:
        ipv4_address: 192.168.1.33

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
    networks:
      backend:
        ipv4_address: 192.168.1.30

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      backend:
        ipv4_address: 192.168.1.31
    depends_on:
      - elasticsearch

networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.1

volumes:
  auth_service_db_data:
  video_service_db_data:
  comment_service_db_data:
  notification_service_db_data:
  recommendation_service_db_data:
